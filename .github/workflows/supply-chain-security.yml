name: Supply Chain Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans (Sundays at 2 AM UTC)
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write
  attestations: write
  id-token: write

env:
  POLICY_PATHS: 'policies/**/*.json policies/**/*.xml'
  SCRIPT_PATHS: 'scripts/**/*.ps1'

jobs:
  supply-chain-scan:
    name: Supply Chain Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate SLSA provenance attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: '${{ env.POLICY_PATHS }}'
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: OSSF Scorecard analysis
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: scorecard-results.sarif
        results_format: sarif
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        publish_results: true
        
    - name: Upload OSSF Scorecard results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: scorecard-results.sarif
        
    - name: Dependency review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        
  policy-attestation:
    name: Policy File Attestation
    runs-on: ubuntu-latest
    needs: supply-chain-scan
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        
    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        source /etc/os-release
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Validate PowerShell scripts
      run: |
        pwsh -Command "
          Write-Host 'Validating PowerShell scripts for supply chain integrity...'
          Get-ChildItem -Path 'scripts' -Filter '*.ps1' -Recurse | ForEach-Object {
            Write-Host \"Checking: \$($_.Name)\"
            try {
              \$null = [System.Management.Automation.PSParser]::Tokenize((Get-Content \$_.FullName -Raw), [ref]\$null)
              Write-Host \"✓ \$($_.Name) - Syntax valid\"
            } catch {
              Write-Error \"✗ \$($_.Name) - Syntax error: \$_\"
              exit 1
            }
          }
        "
        
    - name: Generate policy file checksums
      id: checksums
      run: |
        echo "Generating checksums for policy files..."
        find policies -name '*.json' -o -name '*.xml' | while read file; do
          checksum=$(sha256sum "$file" | cut -d' ' -f1)
          echo "$file: $checksum"
          echo "${file//[\/\.]/_}_checksum=$checksum" >> $GITHUB_OUTPUT
        done
        
    - name: Attest policy file integrity
      uses: actions/attest@v1
      with:
        subject-path: '${{ env.POLICY_PATHS }}'
        predicate-type: 'https://in-toto.io/Statement/v1'
        predicate: |
          {
            "_type": "https://in-toto.io/Statement/v1",
            "subject": [
              {
                "name": "browser-popup-mdm-policies",
                "digest": {
                  "sha256": "${{ steps.checksums.outputs.policies_checksum }}"
                }
              }
            ],
            "predicateType": "https://slsa.dev/provenance/v1",
            "predicate": {
              "buildDefinition": {
                "buildType": "https://github.com/actions/runner",
                "externalParameters": {
                  "workflow": "supply-chain-security.yml",
                  "repository": "${{ github.repository }}"
                }
              },
              "runDetails": {
                "builder": {
                  "id": "https://github.com/actions/runner"
                },
                "metadata": {
                  "invocationId": "${{ github.run_id }}",
                  "startedOn": "${{ github.event.head_commit.timestamp }}"
                }
              }
            }
          }
          
  powershell-security:
    name: PowerShell Security Analysis
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install PSScriptAnalyzer
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        
    - name: Run PowerShell security analysis
      run: |
        $results = @()
        Get-ChildItem -Path 'scripts' -Filter '*.ps1' -Recurse | ForEach-Object {
          Write-Host "Analyzing: $($_.Name)"
          $analysis = Invoke-ScriptAnalyzer -Path $_.FullName -Severity Warning,Error -IncludeDefaultRules
          if ($analysis) {
            $results += $analysis
            Write-Host "Found $($analysis.Count) issues in $($_.Name)"
          } else {
            Write-Host "✓ No security issues found in $($_.Name)"
          }
        }
        
        if ($results.Count -gt 0) {
          Write-Host "`n=== SECURITY ANALYSIS RESULTS ==="
          $results | Format-Table -Property Severity,RuleName,Message,Line,Column -Wrap
          
          $errors = $results | Where-Object { $_.Severity -eq 'Error' }
          if ($errors.Count -gt 0) {
            Write-Error "Found $($errors.Count) security errors in PowerShell scripts"
            exit 1
          }
        }
        
    - name: Check for hardcoded secrets
      run: |
        Write-Host "Scanning for potential hardcoded secrets..."
        $patterns = @(
          'password\s*=',
          'apikey\s*=',
          'secret\s*=',
          'token\s*=',
          'key\s*=.*[a-zA-Z0-9]{20,}'
        )
        
        $findings = @()
        Get-ChildItem -Path 'scripts' -Filter '*.ps1' -Recurse | ForEach-Object {
          $content = Get-Content $_.FullName -Raw
          foreach ($pattern in $patterns) {
            if ($content -match $pattern) {
              $findings += "Potential secret pattern found in $($_.Name): $pattern"
            }
          }
        }
        
        if ($findings.Count -gt 0) {
          Write-Host "`n=== POTENTIAL SECRETS FOUND ==="
          $findings | ForEach-Object { Write-Warning $_ }
          Write-Host "`nPlease review these findings and ensure no actual secrets are committed."
        } else {
          Write-Host "✓ No hardcoded secret patterns detected"
        }
        
  compliance-check:
    name: Compliance and Best Practices
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for required files
      run: |
        echo "Checking for required security and compliance files..."
        required_files=(
          "SECURITY.md"
          "CODE_OF_CONDUCT.md"
          "CONTRIBUTING.md"
          "LICENSE"
          ".github/CODEOWNERS"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          else
            echo "✓ Found: $file"
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "⚠️  Missing recommended files:"
          printf '%s\n' "${missing_files[@]}"
        else
          echo "✓ All recommended compliance files present"
        fi
        
    - name: Validate JSON policy files
      run: |
        echo "Validating JSON policy file structure..."
        find policies -name '*.json' | while read file; do
          echo "Validating: $file"
          if jq empty "$file" 2>/dev/null; then
            echo "✓ Valid JSON: $file"
            
            # Check for required fields in popup policies
            if jq -e '.PopupsAllowedForUrls or .PopupsBlockedForUrls or .DefaultPopupsSetting' "$file" >/dev/null 2>&1; then
              echo "✓ Contains popup policy configuration: $file"
            else
              echo "⚠️  No popup policy configuration found in: $file"
            fi
          else
            echo "✗ Invalid JSON: $file"
            exit 1
          fi
        done
        
    - name: Validate XML policy files
      run: |
        echo "Validating XML policy file structure..."
        find policies -name '*.xml' | while read file; do
          echo "Validating: $file"
          if xmllint --noout "$file" 2>/dev/null; then
            echo "✓ Valid XML: $file"
          else
            echo "✗ Invalid XML: $file"
            exit 1
          fi
        done
        
    - name: Generate security report
      run: |
        echo "# Supply Chain Security Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "Repository: ${{ github.repository }}" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Security Measures Implemented" >> security-report.md
        echo "- ✅ SLSA provenance attestation" >> security-report.md
        echo "- ✅ Trivy vulnerability scanning" >> security-report.md
        echo "- ✅ OSSF Scorecard analysis" >> security-report.md
        echo "- ✅ Dependency review" >> security-report.md
        echo "- ✅ Policy file integrity attestation" >> security-report.md
        echo "- ✅ PowerShell security analysis" >> security-report.md
        echo "- ✅ Hardcoded secrets detection" >> security-report.md
        echo "- ✅ JSON/XML policy validation" >> security-report.md
        echo "- ✅ Compliance file verification" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30
